#!/usr/bin/env ruby
# encoding: utf-8

require_relative '../colorize'

VERBOSE = ARGV.delete('-v') || ARGV.delete('--verbose')
HILIGHT = ARGV.delete('--high-light') || ARGV.delete('--hi')
ALL = (ARGV.delete('--all') and '--all') or ''

commit = given_commit = ARGV.shift || `git rev-parse HEAD`.strip
SHOW_CONTEXT = (ARGV.shift || 3).to_i

option = 'log --pretty=format:"%h %ad %an %s"'
# option = 'log1-color'
# option = 'log1'

# Ancesters
cmd1 = "git #{option} --ancestry-path #{ALL} #{commit}^.."
puts cmd1 if VERBOSE

my_ancestors_including_me = `#{cmd1}`.to_s.split /\n/
if VERBOSE
    puts "Ancestors of HEAD until #{commit}:"
    puts my_ancestors_including_me
end

# First parents
cmd2 = "git #{option} --first-parent #{ALL} #{commit}.."
puts cmd2 if VERBOSE

my_first_parents = `#{cmd2}`.to_s.split /\n/
if VERBOSE
    puts "(my first parents set) diff (#{commit}'s first parents set):"
    puts my_first_parents
end

# Common between ancesters and first parents
common = my_ancestors_including_me & my_first_parents
if VERBOSE
    puts "common:"
    puts common
end

merged_at = common.last.to_s.split(/\s/, 2).first
after_merged = (common[-SHOW_CONTEXT] || common[-1]).to_s.split(/\s/,2).first
me = my_ancestors_including_me.last.split(/\s/, 2).first

# Highlight those two commits in `git --graph`:
if HILIGHT
    keys = common.map {|t| t.split(/\s/, 2)[0]}.join('|')
    cmd = "git lg #{me}~1..#{after_merged} | colorize.rb '(#{me}|#{merged_at}|#{keys})' yellow,swapcolor,#{'yellow,'*(keys.length-1)}yellow"
else
    cmd = "git lg #{me}~1..#{after_merged} | colorize.rb '(#{me}|#{merged_at})' yellow:swapcolor"
end

# system cmd
puts "\t" + cmd

# Show found commit:
puts "Merged at commit: " + `git log -n1 --pretty=format:"%h %ad %an %s" #{merged_at}`
puts "me(given commit): " + `git log -n1 --pretty=format:"%h %ad %an %s" #{me}`

